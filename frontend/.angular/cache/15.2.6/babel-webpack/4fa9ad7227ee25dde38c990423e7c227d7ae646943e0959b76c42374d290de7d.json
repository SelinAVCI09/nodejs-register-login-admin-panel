{"ast":null,"code":"import { NavigationStart, NavigationEnd, NavigationError } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class NavigationService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiUrl = 'http://localhost:4002/api/button-stats/record-button-click';\n    this.userButtonStatsUrl = 'http://localhost:4002/api/button-stats/user-button-stats';\n    this.usersUrl = 'http://localhost:4002/api/users';\n    this.logoutUrl = 'http://localhost:4002/api/logout'; // Logout API URL\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        this.onNavigationStart(event);\n      } else if (event instanceof NavigationEnd) {\n        this.onNavigationEnd(event);\n      } else if (event instanceof NavigationError) {\n        this.onNavigationError(event);\n      }\n    });\n  }\n  onNavigationStart(event) {\n    console.log('Navigation started');\n    // Show loading indicator or any other logic\n  }\n\n  onNavigationEnd(event) {\n    console.log('Navigation ended');\n    // Hide loading indicator or any other logic\n    this.urlChange(event.url);\n  }\n  onNavigationError(event) {\n    console.error('Navigation error', event.error);\n    // Hide loading indicator or present error to user\n  }\n\n  recordButtonClick(buttonName) {\n    const userId = sessionStorage.getItem('userId');\n    if (!userId) {\n      console.error('No User ID found');\n      return;\n    }\n    const userIdNumber = Number(userId); // Convert user ID to a number\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid User ID');\n      return;\n    }\n    this.http.post(this.apiUrl, {\n      userId: userIdNumber,\n      buttonName\n    }).subscribe({\n      next: response => {\n        console.log('Button click recorded', response);\n      },\n      error: error => {\n        console.error('Error recording button click', error);\n      }\n    });\n  }\n  getUserButtonStats() {\n    return this.http.get(this.userButtonStatsUrl);\n  }\n  getUsers() {\n    return this.http.get(this.usersUrl);\n  }\n  urlChange(url) {\n    console.log('URL changed to:', url);\n    // Socket service or any other logic for URL change\n  }\n\n  logoutAndRedirect() {\n    const token = sessionStorage.getItem('token'); // Token'ı almak için uygun yer\n    if (!token) {\n      console.error('No token found');\n      // Eğer token yoksa bile yönlendirme yap\n      this.router.navigate(['/login']);\n      return;\n    }\n    this.router.navigate(['/login']).then(() => {\n      // Yönlendirme tamamlandıktan sonra token'ı sil\n      sessionStorage.removeItem('token'); // Token'ı sil\n      sessionStorage.removeItem('userId'); // Kullanıcı ID'sini de silebilirsin\n    });\n  }\n}\n\nNavigationService.ɵfac = function NavigationService_Factory(t) {\n  return new (t || NavigationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nNavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NavigationService,\n  factory: NavigationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["NavigationStart","NavigationEnd","NavigationError","NavigationService","constructor","router","http","events","subscribe","event","onNavigationStart","onNavigationEnd","onNavigationError","console","log","urlChange","url","error","recordButtonClick","buttonName","userId","sessionStorage","getItem","userIdNumber","Number","isNaN","post","apiUrl","next","response","getUserButtonStats","get","userButtonStatsUrl","getUsers","usersUrl","logoutAndRedirect","token","navigate","then","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/Users/selinavci/Desktop/Kentkart/nodejs-register-login-admin-panel-main-2/frontend/src/app/services/navigation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd, NavigationError, Event } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, timer } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  private apiUrl = 'http://localhost:4002/api/button-stats/record-button-click';\n  private userButtonStatsUrl = 'http://localhost:4002/api/button-stats/user-button-stats';\n  private usersUrl = 'http://localhost:4002/api/users';\n  private logoutUrl = 'http://localhost:4002/api/logout'; // Logout API URL\n\n  constructor(private router: Router, private http: HttpClient) {\n    this.router.events.subscribe((event: Event) => {\n      if (event instanceof NavigationStart) {\n        this.onNavigationStart(event);\n      } else if (event instanceof NavigationEnd) {\n        this.onNavigationEnd(event);\n      } else if (event instanceof NavigationError) {\n        this.onNavigationError(event);\n      }\n    });\n  }\n\n  private onNavigationStart(event: NavigationStart): void {\n    console.log('Navigation started');\n    // Show loading indicator or any other logic\n  }\n\n  private onNavigationEnd(event: NavigationEnd): void {\n    console.log('Navigation ended');\n    // Hide loading indicator or any other logic\n    this.urlChange(event.url);\n  }\n\n  private onNavigationError(event: NavigationError): void {\n    console.error('Navigation error', event.error);\n    // Hide loading indicator or present error to user\n  }\n\n  public recordButtonClick(buttonName: string): void {\n    const userId = sessionStorage.getItem('userId');\n\n    if (!userId) {\n      console.error('No User ID found');\n      return;\n    }\n\n    const userIdNumber = Number(userId); // Convert user ID to a number\n\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid User ID');\n      return;\n    }\n\n    this.http.post(this.apiUrl, { userId: userIdNumber, buttonName })\n      .subscribe({\n        next: (response) => {\n          console.log('Button click recorded', response);\n        },\n        error: (error) => {\n          console.error('Error recording button click', error);\n        }\n      });\n  }\n\n  public getUserButtonStats(): Observable<any[]> {\n    return this.http.get<any[]>(this.userButtonStatsUrl);\n  }\n\n  public getUsers(): Observable<any[]> {\n    return this.http.get<any[]>(this.usersUrl);\n  }\n\n  private urlChange(url: string): void {\n    console.log('URL changed to:', url);\n    // Socket service or any other logic for URL change\n  }\n\n  public logoutAndRedirect(): void {\n    const token = sessionStorage.getItem('token'); // Token'ı almak için uygun yer\n\n    if (!token) {\n      console.error('No token found');\n      // Eğer token yoksa bile yönlendirme yap\n      this.router.navigate(['/login']);\n      return;\n    }\n\n    this.router.navigate(['/login']).then(() => {\n      // Yönlendirme tamamlandıktan sonra token'ı sil\n      sessionStorage.removeItem('token'); // Token'ı sil\n      sessionStorage.removeItem('userId'); // Kullanıcı ID'sini de silebilirsin\n    });\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}