{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:4002/api'; // Güncel API URL'inizi buraya ekleyin\n  }\n  // Kullanıcı bilgilerini almak için\n  getUserDetails(userId) {\n    return this.http.get(`${this.apiUrl}/users/${userId}`);\n  }\n  // Kullanıcı buton eylemlerini almak için\n  getUserActions(userId) {\n    return this.http.get(`${this.apiUrl}/user-actions/${userId}`);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,2BAA2B,CAAC,CAAC;EAEP;EAEvC;EACAC,cAAc,CAACC,MAAc;IAC3B,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACC,MAAM,UAAUF,MAAM,EAAE,CAAC;EAC7D;EAEA;EACAG,cAAc,CAACH,MAAc;IAC3B,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,iBAAiBF,MAAM,EAAE,CAAC;EACtE;;AAbWJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAQ,SAAXR,WAAW;EAAAS,YAFV;AAAM","names":["UserService","constructor","http","getUserDetails","userId","get","apiUrl","getUserActions","factory","providedIn"],"sourceRoot":"","sources":["/Users/selinavci/Downloads/LoginAuthenticationApp-NodeJS-AngularJS-main/frontend/src/app/services/user.service.ts"],"sourcesContent":["// src/app/services/user.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl = 'http://localhost:4002/api'; // Güncel API URL'inizi buraya ekleyin\n\n  constructor(private http: HttpClient) {}\n\n  // Kullanıcı bilgilerini almak için\n  getUserDetails(userId: string): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/users/${userId}`);\n  }\n\n  // Kullanıcı buton eylemlerini almak için\n  getUserActions(userId: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/user-actions/${userId}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}