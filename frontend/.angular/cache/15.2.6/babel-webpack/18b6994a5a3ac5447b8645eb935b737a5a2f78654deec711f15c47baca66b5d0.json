{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:4002/api'; // API URL'iniz\n    this.tokenKey = 'auth-token';\n  }\n  login(user) {\n    return this.http.post(`${this.apiUrl}/login`, user);\n  }\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  decodeToken(token) {\n    return jwtDecode(token);\n  }\n  getUserId() {\n    const token = this.getToken();\n    if (token) {\n      const decodedToken = this.decodeToken(token);\n      return decodedToken.id || null;\n    }\n    return null;\n  }\n  isTokenValid() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    const decodedToken = this.decodeToken(token);\n    const expirationDate = new Date(decodedToken.exp * 1000);\n    return expirationDate > new Date();\n  }\n  logout() {\n    return this.http.post(`${this.apiUrl}/logout`, {}).pipe(tap(() => {\n      localStorage.removeItem(this.tokenKey);\n      sessionStorage.removeItem('userId');\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,SAAS,QAAQ,YAAY;;;AAKtC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAG,2BAA2B,CAAC,CAAC;IACtC,aAAQ,GAAG,YAAY;EAEQ;EAEvCC,KAAK,CAACC,IAAS;IACb,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,IAAI,CAAC;EAC1D;EAEAG,QAAQ,CAACC,KAAa;IACpBC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,QAAQ,EAAEH,KAAK,CAAC;EAC5C;EAEAI,QAAQ;IACN,OAAOH,YAAY,CAACI,OAAO,CAAC,IAAI,CAACF,QAAQ,CAAC;EAC5C;EAEAG,WAAW,CAACN,KAAa;IACvB,OAAOT,SAAS,CAACS,KAAK,CAAC;EACzB;EAEAO,SAAS;IACP,MAAMP,KAAK,GAAG,IAAI,CAACI,QAAQ,EAAE;IAC7B,IAAIJ,KAAK,EAAE;MACT,MAAMQ,YAAY,GAAG,IAAI,CAACF,WAAW,CAACN,KAAK,CAAC;MAC5C,OAAOQ,YAAY,CAACC,EAAE,IAAI,IAAI;;IAEhC,OAAO,IAAI;EACb;EAEAC,YAAY;IACV,MAAMV,KAAK,GAAG,IAAI,CAACI,QAAQ,EAAE;IAC7B,IAAI,CAACJ,KAAK,EAAE;MACV,OAAO,KAAK;;IAEd,MAAMQ,YAAY,GAAG,IAAI,CAACF,WAAW,CAACN,KAAK,CAAC;IAC5C,MAAMW,cAAc,GAAG,IAAIC,IAAI,CAACJ,YAAY,CAACK,GAAG,GAAG,IAAI,CAAC;IACxD,OAAOF,cAAc,GAAG,IAAIC,IAAI,EAAE;EACpC;EAEAE,MAAM;IACJ,OAAO,IAAI,CAACpB,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACC,MAAM,SAAS,EAAE,EAAE,CAAC,CAACiB,IAAI,CAC3DzB,GAAG,CAAC,MAAK;MACPW,YAAY,CAACe,UAAU,CAAC,IAAI,CAACb,QAAQ,CAAC;MACtCc,cAAc,CAACD,UAAU,CAAC,QAAQ,CAAC;IACrC,CAAC,CAAC,CACH;EACH;;AAhDWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["tap","jwtDecode","AuthService","constructor","http","login","user","post","apiUrl","setToken","token","localStorage","setItem","tokenKey","getToken","getItem","decodeToken","getUserId","decodedToken","id","isTokenValid","expirationDate","Date","exp","logout","pipe","removeItem","sessionStorage","factory","providedIn"],"sourceRoot":"","sources":["/Users/selinavci/Desktop/Kentkart/nodejs-register-login-admin-panel-main-2/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { jwtDecode } from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:4002/api'; // API URL'iniz\n  private tokenKey = 'auth-token';\n\n  constructor(private http: HttpClient) {}\n\n  login(user: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, user);\n  }\n\n  setToken(token: string): void {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  decodeToken(token: string): any {\n    return jwtDecode(token);\n  }\n\n  getUserId(): string | null {\n    const token = this.getToken();\n    if (token) {\n      const decodedToken = this.decodeToken(token);\n      return decodedToken.id || null;\n    }\n    return null;\n  }\n\n  isTokenValid(): boolean {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    const decodedToken = this.decodeToken(token);\n    const expirationDate = new Date(decodedToken.exp * 1000);\n    return expirationDate > new Date();\n  }\n\n  logout(): Observable<void> {\n    return this.http.post<void>(`${this.apiUrl}/logout`, {}).pipe(\n      tap(() => {\n        localStorage.removeItem(this.tokenKey);\n        sessionStorage.removeItem('userId');\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}