{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./button-click.service\";\nexport class NavigationService {\n  constructor(router, http, buttonClickService) {\n    this.router = router;\n    this.http = http;\n    this.buttonClickService = buttonClickService;\n    this.userButtonStatsUrl = 'http://localhost:4002/api/button-stats/user-button-stats';\n    this.usersUrl = 'http://localhost:4002/api/users';\n  }\n  // Buton tıklama olayını kaydetme fonksiyonu\n  recordButtonClick(buttonName) {\n    const userId = sessionStorage.getItem('userId');\n    if (!userId) {\n      console.error('No User ID found');\n      return;\n    }\n    const userIdNumber = Number(userId); // Kullanıcı ID'sini numaraya çevirme\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid User ID');\n      return;\n    }\n    console.log('Sending button click:', {\n      userId: userIdNumber,\n      buttonName\n    });\n    this.buttonClickService.recordButtonClick(userIdNumber, buttonName) // Bu satırı kullanarak doğru servisi çağırın\n    .subscribe({\n      next: response => {\n        console.log('Button click recorded', response);\n      },\n      error: error => {\n        console.error('Error recording button click', error);\n      }\n    });\n  }\n  // Kullanıcı buton istatistiklerini alma fonksiyonu\n  getUserButtonStats() {\n    return this.http.get(this.userButtonStatsUrl);\n  }\n  // Kullanıcıları alma fonksiyonu\n  getUsers() {\n    return this.http.get(this.usersUrl);\n  }\n  // Oturumu kapatma ve yönlendirme fonksiyonu\n  logoutAndRedirect() {\n    const token = sessionStorage.getItem('token');\n    if (!token) {\n      console.error('No token found');\n      this.router.navigate(['/login']);\n      return;\n    }\n    // Yönlendirme işlemini başlat\n    this.router.navigate(['/login']).then(() => {\n      // Yönlendirme tamamlandıktan sonra token'ı ve userId'yi sil\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('userId');\n    });\n  }\n  // Token kontrol fonksiyonu\n  checkToken() {\n    const token = sessionStorage.getItem('token');\n    return !!token; // Token varsa true, yoksa false döner\n  }\n}\n\nNavigationService.ɵfac = function NavigationService_Factory(t) {\n  return new (t || NavigationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.ButtonClickService));\n};\nNavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NavigationService,\n  factory: NavigationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AASA,OAAM,MAAOA,iBAAiB;EAI5BC,YAAoBC,MAAc,EAAUC,IAAgB,EAAUC,kBAAsC;IAAxF,WAAM,GAANF,MAAM;IAAkB,SAAI,GAAJC,IAAI;IAAsB,uBAAkB,GAAlBC,kBAAkB;IAHhF,uBAAkB,GAAG,0DAA0D;IAC/E,aAAQ,GAAG,iCAAiC;EAE2D;EAE/G;EACOC,iBAAiB,CAACC,UAAkB;IACzC,MAAMC,MAAM,GAAGC,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;IAE/C,IAAI,CAACF,MAAM,EAAE;MACXG,OAAO,CAACC,KAAK,CAAC,kBAAkB,CAAC;MACjC;;IAGF,MAAMC,YAAY,GAAGC,MAAM,CAACN,MAAM,CAAC,CAAC,CAAC;IAErC,IAAIO,KAAK,CAACF,YAAY,CAAC,EAAE;MACvBF,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC;MAChC;;IAGFD,OAAO,CAACK,GAAG,CAAC,uBAAuB,EAAE;MAAER,MAAM,EAAEK,YAAY;MAAEN;IAAU,CAAE,CAAC;IAE1E,IAAI,CAACF,kBAAkB,CAACC,iBAAiB,CAACO,YAAY,EAAEN,UAAU,CAAC,CAAC;IAAA,CACjEU,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjBR,OAAO,CAACK,GAAG,CAAC,uBAAuB,EAAEG,QAAQ,CAAC;MAChD,CAAC;MACDP,KAAK,EAAGA,KAAK,IAAI;QACfD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;KACD,CAAC;EACN;EAEA;EACOQ,kBAAkB;IACvB,OAAO,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAQ,IAAI,CAACC,kBAAkB,CAAC;EACtD;EAEA;EACOC,QAAQ;IACb,OAAO,IAAI,CAACnB,IAAI,CAACiB,GAAG,CAAQ,IAAI,CAACG,QAAQ,CAAC;EAC5C;EAEA;EACOC,iBAAiB;IACtB,MAAMC,KAAK,GAAGjB,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAE7C,IAAI,CAACgB,KAAK,EAAE;MACVf,OAAO,CAACC,KAAK,CAAC,gBAAgB,CAAC;MAC/B,IAAI,CAACT,MAAM,CAACwB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC;;IAGF;IACA,IAAI,CAACxB,MAAM,CAACwB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,MAAK;MACzC;MACAnB,cAAc,CAACoB,UAAU,CAAC,OAAO,CAAC;MAClCpB,cAAc,CAACoB,UAAU,CAAC,QAAQ,CAAC;IACrC,CAAC,CAAC;EACJ;EAEA;EACOC,UAAU;IACf,MAAMJ,KAAK,GAAGjB,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC7C,OAAO,CAAC,CAACgB,KAAK,CAAC,CAAC;EAClB;;;AAnEWzB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAA8B,SAAjB9B,iBAAiB;EAAA+B,YAFhB;AAAM","names":["NavigationService","constructor","router","http","buttonClickService","recordButtonClick","buttonName","userId","sessionStorage","getItem","console","error","userIdNumber","Number","isNaN","log","subscribe","next","response","getUserButtonStats","get","userButtonStatsUrl","getUsers","usersUrl","logoutAndRedirect","token","navigate","then","removeItem","checkToken","factory","providedIn"],"sourceRoot":"","sources":["/Users/selinavci/Desktop/Kentkart/nodejs-register-login-admin-panel-main-2/frontend/src/app/services/navigation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ButtonClickService } from './button-click.service'; // ButtonClickService'i ekleyin\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  private userButtonStatsUrl = 'http://localhost:4002/api/button-stats/user-button-stats';\n  private usersUrl = 'http://localhost:4002/api/users';\n\n  constructor(private router: Router, private http: HttpClient, private buttonClickService: ButtonClickService) {}\n\n  // Buton tıklama olayını kaydetme fonksiyonu\n  public recordButtonClick(buttonName: string): void {\n    const userId = sessionStorage.getItem('userId');\n\n    if (!userId) {\n      console.error('No User ID found');\n      return;\n    }\n\n    const userIdNumber = Number(userId); // Kullanıcı ID'sini numaraya çevirme\n\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid User ID');\n      return;\n    }\n\n    console.log('Sending button click:', { userId: userIdNumber, buttonName });\n\n    this.buttonClickService.recordButtonClick(userIdNumber, buttonName) // Bu satırı kullanarak doğru servisi çağırın\n      .subscribe({\n        next: (response) => {\n          console.log('Button click recorded', response);\n        },\n        error: (error) => {\n          console.error('Error recording button click', error);\n        }\n      });\n  }\n\n  // Kullanıcı buton istatistiklerini alma fonksiyonu\n  public getUserButtonStats(): Observable<any[]> {\n    return this.http.get<any[]>(this.userButtonStatsUrl);\n  }\n\n  // Kullanıcıları alma fonksiyonu\n  public getUsers(): Observable<any[]> {\n    return this.http.get<any[]>(this.usersUrl);\n  }\n\n  // Oturumu kapatma ve yönlendirme fonksiyonu\n  public logoutAndRedirect(): void {\n    const token = sessionStorage.getItem('token');\n\n    if (!token) {\n      console.error('No token found');\n      this.router.navigate(['/login']);\n      return;\n    }\n\n    // Yönlendirme işlemini başlat\n    this.router.navigate(['/login']).then(() => {\n      // Yönlendirme tamamlandıktan sonra token'ı ve userId'yi sil\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('userId');\n    });\n  }\n\n  // Token kontrol fonksiyonu\n  public checkToken(): boolean {\n    const token = sessionStorage.getItem('token');\n    return !!token; // Token varsa true, yoksa false döner\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}