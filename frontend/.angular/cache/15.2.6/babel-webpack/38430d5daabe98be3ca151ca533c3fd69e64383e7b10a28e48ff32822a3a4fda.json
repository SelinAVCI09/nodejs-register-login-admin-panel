{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AdminGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    const token = this.authService.getToken();\n    const decodedToken = this.authService.decodeToken(token);\n    if (decodedToken && decodedToken.role === 'admin') {\n      return true;\n    }\n    this.router.navigate(['login']);\n    return false;\n  }\n}\nAdminGuard.ɵfac = function AdminGuard_Factory(t) {\n  return new (t || AdminGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAdminGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminGuard,\n  factory: AdminGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,UAAU;EACrBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IACT,MAAMC,KAAK,GAAG,IAAI,CAACH,WAAW,CAACI,QAAQ,EAAE;IACzC,MAAMC,YAAY,GAAG,IAAI,CAACL,WAAW,CAACM,WAAW,CAACH,KAAK,CAAC;IAExD,IAAIE,YAAY,IAAIA,YAAY,CAACE,IAAI,KAAK,OAAO,EAAE;MACjD,OAAO,IAAI;;IAGb,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC/B,OAAO,KAAK;EACd;;AAbWV,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAW,SAAVX,UAAU;EAAAY,YAFT;AAAM","names":["AdminGuard","constructor","authService","router","canActivate","token","getToken","decodedToken","decodeToken","role","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/selinavci/Downloads/LoginAuthenticationApp-NodeJS-AngularJS-main/frontend/src/app/auth/admin.guard.ts"],"sourcesContent":["// src/app/auth/admin.guard.ts\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    const token = this.authService.getToken();\n    const decodedToken = this.authService.decodeToken(token);\n    \n    if (decodedToken && decodedToken.role === 'admin') {\n      return true;\n    }\n\n    this.router.navigate(['login']);\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}