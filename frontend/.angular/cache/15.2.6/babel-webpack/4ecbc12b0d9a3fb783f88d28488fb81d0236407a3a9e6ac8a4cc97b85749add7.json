{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AdminGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    const token = localStorage.getItem('token'); // veya token'ı nasıl alıyorsanız\n    if (token) {\n      const decodedToken = this.authService.decodeToken(token);\n      // Token'ı decode ettikten sonra gerekli kontrolleri yapabilirsiniz\n      return true; // veya admin yetkisini kontrol edin\n    } else {\n      this.router.navigate(['/login']); // Token yoksa giriş sayfasına yönlendir\n      return false;\n    }\n  }\n}\nAdminGuard.ɵfac = function AdminGuard_Factory(t) {\n  return new (t || AdminGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAdminGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminGuard,\n  factory: AdminGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,UAAU;EAErBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IACT,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAE7C,IAAIF,KAAK,EAAE;MACT,MAAMG,YAAY,GAAG,IAAI,CAACN,WAAW,CAACO,WAAW,CAACJ,KAAK,CAAC;MACxD;MACA,OAAO,IAAI,CAAC,CAAC;KACd,MAAM;MACL,IAAI,CAACF,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClC,OAAO,KAAK;;EAEhB;;AAfWV,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAW,SAAVX,UAAU;EAAAY,YAFT;AAAM","names":["AdminGuard","constructor","authService","router","canActivate","token","localStorage","getItem","decodedToken","decodeToken","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/selinavci/Downloads/LoginAuthenticationApp-NodeJS-AngularJS-main/frontend/src/app/auth/admin.guard.ts"],"sourcesContent":["// src/app/auth/admin.guard.ts\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    const token = localStorage.getItem('token'); // veya token'ı nasıl alıyorsanız\n\n    if (token) {\n      const decodedToken = this.authService.decodeToken(token);\n      // Token'ı decode ettikten sonra gerekli kontrolleri yapabilirsiniz\n      return true; // veya admin yetkisini kontrol edin\n    } else {\n      this.router.navigate(['/login']); // Token yoksa giriş sayfasına yönlendir\n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}