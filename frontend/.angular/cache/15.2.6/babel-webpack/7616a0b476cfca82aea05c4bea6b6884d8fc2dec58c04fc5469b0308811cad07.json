{"ast":null,"code":"import { jwtDecode } from 'jwt-decode'; // Adlandırılmış import ile import et\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:4002/api'; // API URL'iniz\n    this.tokenKey = 'auth-token';\n  }\n  // Login method\n  login(user) {\n    return this.http.post(`${this.apiUrl}/login`, user);\n  }\n  // Store token in local storage\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  // Get token from local storage\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  // Decode token\n  decodeToken(token) {\n    return jwtDecode(token); // Adlandırılmış fonksiyon kullanımı\n  }\n  // Get user ID from token\n  getUserId() {\n    const token = this.getToken();\n    if (token) {\n      const decodedToken = this.decodeToken(token);\n      return decodedToken.userId || null; // Token içinde kullanıcı ID'sini elde edin\n    }\n\n    return null;\n  }\n  // Check if token is valid\n  isTokenValid() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    try {\n      const decodedToken = this.decodeToken(token);\n      const expirationDate = decodedToken.exp * 1000;\n      return expirationDate > Date.now();\n    } catch (error) {\n      return false;\n    }\n  }\n  // Logout method\n  logout() {\n    localStorage.removeItem(this.tokenKey); // Token'ı sil\n    return this.http.post(`${this.apiUrl}/logout`, {});\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEkC,SAASA,SAAS,QAAQ,YAAY,CAAC,CAAC;;;AAK1E,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAG,2BAA2B,CAAC,CAAC;IACtC,aAAQ,GAAG,YAAY;EAEQ;EAEvC;EACAC,KAAK,CAACC,IAAS;IACb,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,IAAI,CAAC;EAC1D;EAEA;EACAG,QAAQ,CAACC,KAAa;IACpBC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,QAAQ,EAAEH,KAAK,CAAC;EAC5C;EAEA;EACAI,QAAQ;IACN,OAAOH,YAAY,CAACI,OAAO,CAAC,IAAI,CAACF,QAAQ,CAAC;EAC5C;EAEA;EACAG,WAAW,CAACN,KAAa;IACvB,OAAOT,SAAS,CAACS,KAAK,CAAC,CAAC,CAAC;EAC3B;EAEA;EACAO,SAAS;IACP,MAAMP,KAAK,GAAG,IAAI,CAACI,QAAQ,EAAE;IAC7B,IAAIJ,KAAK,EAAE;MACT,MAAMQ,YAAY,GAAG,IAAI,CAACF,WAAW,CAACN,KAAK,CAAC;MAC5C,OAAOQ,YAAY,CAACC,MAAM,IAAI,IAAI,CAAC,CAAC;;;IAEtC,OAAO,IAAI;EACb;EAEA;EACAC,YAAY;IACV,MAAMV,KAAK,GAAG,IAAI,CAACI,QAAQ,EAAE;IAC7B,IAAI,CAACJ,KAAK,EAAE;MACV,OAAO,KAAK;;IAEd,IAAI;MACF,MAAMQ,YAAY,GAAG,IAAI,CAACF,WAAW,CAACN,KAAK,CAAC;MAC5C,MAAMW,cAAc,GAAGH,YAAY,CAACI,GAAG,GAAG,IAAI;MAC9C,OAAOD,cAAc,GAAGE,IAAI,CAACC,GAAG,EAAE;KACnC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO,KAAK;;EAEhB;EAEA;EACAC,MAAM;IACJf,YAAY,CAACgB,UAAU,CAAC,IAAI,CAACd,QAAQ,CAAC,CAAC,CAAC;IACxC,OAAO,IAAI,CAACT,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACC,MAAM,SAAS,EAAE,EAAE,CAAC;EAC1D;;AAvDWN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["jwtDecode","AuthService","constructor","http","login","user","post","apiUrl","setToken","token","localStorage","setItem","tokenKey","getToken","getItem","decodeToken","getUserId","decodedToken","userId","isTokenValid","expirationDate","exp","Date","now","error","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/Users/selinavci/Desktop/Kentkart/nodejs-register-login-admin-panel-main-2/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';import { jwtDecode } from 'jwt-decode'; // Adlandırılmış import ile import et\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:4002/api'; // API URL'iniz\n  private tokenKey = 'auth-token';\n\n  constructor(private http: HttpClient) {}\n\n  // Login method\n  login(user: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, user);\n  }\n\n  // Store token in local storage\n  setToken(token: string): void {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  // Get token from local storage\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  // Decode token\n  decodeToken(token: string): any {\n    return jwtDecode(token); // Adlandırılmış fonksiyon kullanımı\n  }\n\n  // Get user ID from token\n  getUserId(): string | null {\n    const token = this.getToken();\n    if (token) {\n      const decodedToken = this.decodeToken(token);\n      return decodedToken.userId || null; // Token içinde kullanıcı ID'sini elde edin\n    }\n    return null;\n  }\n\n  // Check if token is valid\n  isTokenValid(): boolean {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    try {\n      const decodedToken = this.decodeToken(token);\n      const expirationDate = decodedToken.exp * 1000;\n      return expirationDate > Date.now();\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Logout method\n  logout(): Observable<void> {\n    localStorage.removeItem(this.tokenKey); // Token'ı sil\n    return this.http.post<void>(`${this.apiUrl}/logout`, {});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}