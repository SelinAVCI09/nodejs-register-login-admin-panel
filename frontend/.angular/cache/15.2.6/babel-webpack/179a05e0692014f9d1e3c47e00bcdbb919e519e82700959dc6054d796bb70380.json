{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet RegisterComponent = class RegisterComponent {\n  constructor(router) {\n    this.router = router;\n  }\n  registerClick(fullname, username, email, password) {\n    let isValid = this.VerifyInfo(fullname, username, email, password);\n    if (isValid !== '') {\n      return alert(isValid);\n    }\n    fetch('http://localhost:3001/api/v1/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: 0,\n        fullname: fullname.value,\n        username: username.value,\n        email: email.value,\n        password: password.value\n      })\n    }).then(response => {\n      if (!response.ok) {\n        return alert('Something went wrong. Please try again, or try again later');\n      }\n      this.router.navigate(['/login']);\n      console.log(response.json);\n      return response.json();\n    }).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n    fullname.value = '';\n    username.value = '';\n    email.value = '';\n    password.value = '';\n    alert('Successfully Registered!');\n  }\n  VerifyInfo(fullname, username, email, password) {\n    if (fullname.value == \"\" || username.value == \"\" || email.value == \"\" || password.value == \"\") {\n      return 'Please Fill out the form.';\n    }\n    for (let i = 0; i < 10; i++) {\n      if (fullname.value.includes(i.toString())) {\n        return 'Invalid Name';\n      }\n    }\n    var validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    if (!email.value.match(validRegex)) {\n      email.value = '';\n      return 'Invalid Email';\n    }\n    return '';\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAE5BC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;EAAY;EAEtCC,aAAa,CAACC,QAA0B,EAAEC,QAA0B,EAAEC,KAAuB,EAAEC,QAA0B;IAEvH,IAAIC,OAAO,GAAW,IAAI,CAACC,UAAU,CAACL,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,CAAC;IAE1E,IAAIC,OAAO,KAAK,EAAE,EAAE;MAClB,OAAOE,KAAK,CAACF,OAAO,CAAC;;IAGvBG,KAAK,CAAC,uCAAuC,EAAE;MAC7CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;OACjB;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,EAAE,EAAE,CAAC;QACLb,QAAQ,EAAEA,QAAQ,CAACc,KAAK;QACxBb,QAAQ,EAAEA,QAAQ,CAACa,KAAK;QACxBZ,KAAK,EAAEA,KAAK,CAACY,KAAK;QAClBX,QAAQ,EAAEA,QAAQ,CAACW;OACpB;KACF,CAAC,CACCC,IAAI,CAACC,QAAQ,IAAG;MACf,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,OAAOX,KAAK,CAAC,4DAA4D,CAAC;;MAG5E,IAAI,CAACR,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAEhCC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACK,IAAI,CAAC;MAC1B,OAAOL,QAAQ,CAACK,IAAI,EAAE;IACxB,CAAC,CAAC,CACDN,IAAI,CAACO,IAAI,IAAG;MACXH,OAAO,CAACC,GAAG,CAACE,IAAI,CAAC;IACnB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAG;MACbL,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CAAC;IAEJxB,QAAQ,CAACc,KAAK,GAAG,EAAE;IACnBb,QAAQ,CAACa,KAAK,GAAG,EAAE;IACnBZ,KAAK,CAACY,KAAK,GAAG,EAAE;IAChBX,QAAQ,CAACW,KAAK,GAAG,EAAE;IAEnBR,KAAK,CAAC,0BAA0B,CAAC;EACnC;EAEAD,UAAU,CAACL,QAA0B,EAAEC,QAA0B,EAAEC,KAAuB,EAAEC,QAA0B;IACpH,IAAIH,QAAQ,CAACc,KAAK,IAAI,EAAE,IAAIb,QAAQ,CAACa,KAAK,IAAI,EAAE,IAAIZ,KAAK,CAACY,KAAK,IAAI,EAAE,IAAIX,QAAQ,CAACW,KAAK,IAAI,EAAE,EAAE;MAC7F,OAAO,2BAA2B;;IAGpC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,IAAIzB,QAAQ,CAACc,KAAK,CAACY,QAAQ,CAACD,CAAC,CAACE,QAAQ,EAAE,CAAC,EAAE;QACzC,OAAO,cAAc;;;IAIzB,IAAIC,UAAU,GAAG,sEAAsE;IACvF,IAAI,CAAC1B,KAAK,CAACY,KAAK,CAACe,KAAK,CAACD,UAAU,CAAC,EAAE;MAClC1B,KAAK,CAACY,KAAK,GAAG,EAAE;MAChB,OAAO,eAAe;;IAGxB,OAAO,EAAE;EACX;CACD;AArEYlB,iBAAiB,eAL7BD,SAAS,CAAC;EACTmC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWpC,iBAAiB,CAqE7B;SArEYA,iBAAiB","names":["Component","RegisterComponent","constructor","router","registerClick","fullname","username","email","password","isValid","VerifyInfo","alert","fetch","method","headers","body","JSON","stringify","id","value","then","response","ok","navigate","console","log","json","data","catch","error","i","includes","toString","validRegex","match","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/selinavci/Downloads/LoginAuthenticationApp-NodeJS-AngularJS-main/frontend/src/app/components/register/register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  constructor(private router: Router) { }\n\n  registerClick(fullname: HTMLInputElement, username: HTMLInputElement, email: HTMLInputElement, password: HTMLInputElement) {\n\n    let isValid: String = this.VerifyInfo(fullname, username, email, password);\n\n    if (isValid !== '') {\n      return alert(isValid);\n    }\n\n    fetch('http://localhost:3001/api/v1/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: 0,\n        fullname: fullname.value,\n        username: username.value,\n        email: email.value,\n        password: password.value,\n      })\n    })\n      .then(response => {\n        if (!response.ok) {\n          return alert('Something went wrong. Please try again, or try again later');\n        }\n\n        this.router.navigate(['/login']);\n\n        console.log(response.json);\n        return response.json();\n      })\n      .then(data => {\n        console.log(data);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n\n    fullname.value = ''\n    username.value = ''\n    email.value = ''\n    password.value = ''\n\n    alert('Successfully Registered!')\n  }\n\n  VerifyInfo(fullname: HTMLInputElement, username: HTMLInputElement, email: HTMLInputElement, password: HTMLInputElement): String {\n    if (fullname.value == \"\" || username.value == \"\" || email.value == \"\" || password.value == \"\") {\n      return 'Please Fill out the form.';\n    }\n\n    for (let i = 0; i < 10; i++) {\n      if (fullname.value.includes(i.toString())) {\n        return 'Invalid Name';\n      }\n    }\n\n    var validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    if (!email.value.match(validRegex)) {\n      email.value = ''\n      return 'Invalid Email';\n    }\n\n    return '';\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}