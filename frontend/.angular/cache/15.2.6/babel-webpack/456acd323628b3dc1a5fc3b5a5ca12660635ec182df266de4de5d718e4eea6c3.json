{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport { jwtDecode } from 'jwt-decode'; // Named import\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:4002/api'; // API URL'iniz\n    this.tokenKey = 'auth-token';\n  }\n  // Kullanıcı giriş metodu\n  login(user) {\n    return this.http.post(`${this.apiUrl}/login`, user).pipe(tap(response => {\n      if (response && response.token) {\n        this.setToken(response.token);\n        const userId = this.getUserId(); // Token'dan userId'yi al\n        if (userId) {\n          sessionStorage.setItem('userId', userId); // Kullanıcı ID'sini sakla\n        }\n      }\n    }));\n  }\n  // Token'ı localStorage'a kaydet\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  // Token'ı localStorage'dan al\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  // Token'ı decode et\n  decodeToken(token) {\n    return jwtDecode(token);\n  }\n  // Kullanıcı ID'sini decode edilmiş token'dan al\n  getUserId() {\n    const token = this.getToken();\n    if (token) {\n      const decodedToken = this.decodeToken(token);\n      return decodedToken.userId || null;\n    }\n    return null;\n  }\n  // Token'ın geçerliliğini kontrol et\n  isTokenValid() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    const decodedToken = this.decodeToken(token);\n    const expirationDate = new Date(decodedToken.exp * 1000);\n    return expirationDate > new Date();\n  }\n  // Çıkış yapma metodu\n  logout() {\n    return this.http.post(`${this.apiUrl}/logout`, {}).pipe(tap(() => {\n      localStorage.removeItem(this.tokenKey); // Token'ı localStorage'dan kaldır\n      sessionStorage.removeItem('userId'); // Kullanıcı ID'sini sessionStorage'dan kaldır\n    }));\n  }\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;;;AAKxC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAG,2BAA2B,CAAC,CAAC;IACtC,aAAQ,GAAG,YAAY;EAEQ;EAEvC;EACAC,KAAK,CAACC,IAAS;IACb,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,IAAI,CAAC,CAACG,IAAI,CAC3DT,GAAG,CAACU,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,IAAI,CAACC,QAAQ,CAACF,QAAQ,CAACC,KAAK,CAAC;QAC7B,MAAME,MAAM,GAAG,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;QACjC,IAAID,MAAM,EAAE;UACVE,cAAc,CAACC,OAAO,CAAC,QAAQ,EAAEH,MAAM,CAAC,CAAC,CAAC;;;IAGhD,CAAC,CAAC,CACH;EACH;EAEA;EACAD,QAAQ,CAACD,KAAa;IACpBM,YAAY,CAACD,OAAO,CAAC,IAAI,CAACE,QAAQ,EAAEP,KAAK,CAAC;EAC5C;EAEA;EACAQ,QAAQ;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,IAAI,CAACF,QAAQ,CAAC;EAC5C;EAEA;EACAG,WAAW,CAACV,KAAa;IACvB,OAAOV,SAAS,CAACU,KAAK,CAAC;EACzB;EAEA;EACAG,SAAS;IACP,MAAMH,KAAK,GAAG,IAAI,CAACQ,QAAQ,EAAE;IAC7B,IAAIR,KAAK,EAAE;MACT,MAAMW,YAAY,GAAG,IAAI,CAACD,WAAW,CAACV,KAAK,CAAC;MAC5C,OAAOW,YAAY,CAACT,MAAM,IAAI,IAAI;;IAEpC,OAAO,IAAI;EACb;EAEA;EACAU,YAAY;IACV,MAAMZ,KAAK,GAAG,IAAI,CAACQ,QAAQ,EAAE;IAC7B,IAAI,CAACR,KAAK,EAAE;MACV,OAAO,KAAK;;IAEd,MAAMW,YAAY,GAAG,IAAI,CAACD,WAAW,CAACV,KAAK,CAAC;IAC5C,MAAMa,cAAc,GAAG,IAAIC,IAAI,CAACH,YAAY,CAACI,GAAG,GAAG,IAAI,CAAC;IACxD,OAAOF,cAAc,GAAG,IAAIC,IAAI,EAAE;EACpC;EAEA;EACAE,MAAM;IACJ,OAAO,IAAI,CAACvB,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACC,MAAM,SAAS,EAAE,EAAE,CAAC,CAACC,IAAI,CAC3DT,GAAG,CAAC,MAAK;MACPiB,YAAY,CAACW,UAAU,CAAC,IAAI,CAACV,QAAQ,CAAC,CAAC,CAAC;MACxCH,cAAc,CAACa,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CACH;EACH;;;AAjEW1B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["tap","jwtDecode","AuthService","constructor","http","login","user","post","apiUrl","pipe","response","token","setToken","userId","getUserId","sessionStorage","setItem","localStorage","tokenKey","getToken","getItem","decodeToken","decodedToken","isTokenValid","expirationDate","Date","exp","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/Users/selinavci/Desktop/Kentkart/nodejs-register-login-admin-panel-main-2/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { jwtDecode } from 'jwt-decode'; // Named import\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:4002/api'; // API URL'iniz\n  private tokenKey = 'auth-token';\n\n  constructor(private http: HttpClient) {}\n\n  // Kullanıcı giriş metodu\n  login(user: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, user).pipe(\n      tap(response => {\n        if (response && response.token) {\n          this.setToken(response.token);\n          const userId = this.getUserId(); // Token'dan userId'yi al\n          if (userId) {\n            sessionStorage.setItem('userId', userId); // Kullanıcı ID'sini sakla\n          }\n        }\n      })\n    );\n  }\n\n  // Token'ı localStorage'a kaydet\n  setToken(token: string): void {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  // Token'ı localStorage'dan al\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  // Token'ı decode et\n  decodeToken(token: string): any {\n    return jwtDecode(token);\n  }\n\n  // Kullanıcı ID'sini decode edilmiş token'dan al\n  getUserId(): string | null {\n    const token = this.getToken();\n    if (token) {\n      const decodedToken = this.decodeToken(token);\n      return decodedToken.userId || null;\n    }\n    return null;\n  }\n\n  // Token'ın geçerliliğini kontrol et\n  isTokenValid(): boolean {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    const decodedToken = this.decodeToken(token);\n    const expirationDate = new Date(decodedToken.exp * 1000);\n    return expirationDate > new Date();\n  }\n\n  // Çıkış yapma metodu\n  logout(): Observable<void> {\n    return this.http.post<void>(`${this.apiUrl}/logout`, {}).pipe(\n      tap(() => {\n        localStorage.removeItem(this.tokenKey); // Token'ı localStorage'dan kaldır\n        sessionStorage.removeItem('userId'); // Kullanıcı ID'sini sessionStorage'dan kaldır\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}