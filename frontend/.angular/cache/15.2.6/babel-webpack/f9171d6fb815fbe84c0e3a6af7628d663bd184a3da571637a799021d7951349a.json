{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class NavigationService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiUrl = 'http://localhost:4002/api/button-stats/record-button-click';\n    this.userButtonStatsUrl = 'http://localhost:4002/api/button-stats/user-button-stats';\n    this.usersUrl = 'http://localhost:4002/api/users';\n  }\n  recordButtonClick(buttonName) {\n    const userId = sessionStorage.getItem('userId');\n    if (!userId) {\n      console.error('No User ID found');\n      return;\n    }\n    const userIdNumber = Number(userId); // Convert user ID to a number\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid User ID');\n      return;\n    }\n    this.http.post(this.apiUrl, {\n      userId: userIdNumber,\n      buttonName\n    }).subscribe({\n      next: response => {\n        console.log('Button click recorded', response);\n      },\n      error: error => {\n        console.error('Error recording button click', error);\n      }\n    });\n  }\n  getUserButtonStats() {\n    return this.http.get(this.userButtonStatsUrl);\n  }\n  getUsers() {\n    return this.http.get(this.usersUrl);\n  }\n  logoutAndRedirect() {\n    const token = sessionStorage.getItem('token'); // Token'ı almak için uygun yer\n    if (!token) {\n      console.error('No token found');\n      // Eğer token yoksa bile yönlendirme yap\n      this.router.navigate(['/login']);\n      return;\n    }\n    // Yönlendirme işlemini başlat\n    this.router.navigate(['/login']).then(() => {\n      // Yönlendirme tamamlandıktan sonra token'ı sil\n      sessionStorage.removeItem('token'); // Token'ı sil\n      sessionStorage.removeItem('userId'); // Kullanıcı ID'sini de silebilirsin\n    });\n  }\n\n  checkToken() {\n    const token = sessionStorage.getItem('token');\n    return !!token; // Token varsa true, yoksa false döner\n  }\n}\n\nNavigationService.ɵfac = function NavigationService_Factory(t) {\n  return new (t || NavigationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nNavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NavigationService,\n  factory: NavigationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,iBAAiB;EAK5BC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,WAAM,GAAND,MAAM;IAAkB,SAAI,GAAJC,IAAI;IAJxC,WAAM,GAAG,4DAA4D;IACrE,uBAAkB,GAAG,0DAA0D;IAC/E,aAAQ,GAAG,iCAAiC;EAEW;EAExDC,iBAAiB,CAACC,UAAkB;IACzC,MAAMC,MAAM,GAAGC,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;IAE/C,IAAI,CAACF,MAAM,EAAE;MACXG,OAAO,CAACC,KAAK,CAAC,kBAAkB,CAAC;MACjC;;IAGF,MAAMC,YAAY,GAAGC,MAAM,CAACN,MAAM,CAAC,CAAC,CAAC;IAErC,IAAIO,KAAK,CAACF,YAAY,CAAC,EAAE;MACvBF,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC;MAChC;;IAGF,IAAI,CAACP,IAAI,CAACW,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;MAAET,MAAM,EAAEK,YAAY;MAAEN;IAAU,CAAE,CAAC,CAC9DW,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjBT,OAAO,CAACU,GAAG,CAAC,uBAAuB,EAAED,QAAQ,CAAC;MAChD,CAAC;MACDR,KAAK,EAAGA,KAAK,IAAI;QACfD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;KACD,CAAC;EACN;EAEOU,kBAAkB;IACvB,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAQ,IAAI,CAACC,kBAAkB,CAAC;EACtD;EAEOC,QAAQ;IACb,OAAO,IAAI,CAACpB,IAAI,CAACkB,GAAG,CAAQ,IAAI,CAACG,QAAQ,CAAC;EAC5C;EAEOC,iBAAiB;IACtB,MAAMC,KAAK,GAAGnB,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAE/C,IAAI,CAACkB,KAAK,EAAE;MACVjB,OAAO,CAACC,KAAK,CAAC,gBAAgB,CAAC;MAC/B;MACA,IAAI,CAACR,MAAM,CAACyB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC;;IAGF;IACA,IAAI,CAACzB,MAAM,CAACyB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,MAAK;MACzC;MACArB,cAAc,CAACsB,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;MACpCtB,cAAc,CAACsB,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC;EACJ;;EAEOC,UAAU;IACf,MAAMJ,KAAK,GAAGnB,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC7C,OAAO,CAAC,CAACkB,KAAK,CAAC,CAAC;EAClB;;;AA9DW1B,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAA+B,SAAjB/B,iBAAiB;EAAAgC,YAFhB;AAAM","names":["NavigationService","constructor","router","http","recordButtonClick","buttonName","userId","sessionStorage","getItem","console","error","userIdNumber","Number","isNaN","post","apiUrl","subscribe","next","response","log","getUserButtonStats","get","userButtonStatsUrl","getUsers","usersUrl","logoutAndRedirect","token","navigate","then","removeItem","checkToken","factory","providedIn"],"sourceRoot":"","sources":["/Users/selinavci/Desktop/Kentkart/nodejs-register-login-admin-panel-main-2/frontend/src/app/services/navigation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  private apiUrl = 'http://localhost:4002/api/button-stats/record-button-click';\n  private userButtonStatsUrl = 'http://localhost:4002/api/button-stats/user-button-stats';\n  private usersUrl = 'http://localhost:4002/api/users';\n\n  constructor(private router: Router, private http: HttpClient) {}\n\n  public recordButtonClick(buttonName: string): void {\n    const userId = sessionStorage.getItem('userId');\n\n    if (!userId) {\n      console.error('No User ID found');\n      return;\n    }\n\n    const userIdNumber = Number(userId); // Convert user ID to a number\n\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid User ID');\n      return;\n    }\n\n    this.http.post(this.apiUrl, { userId: userIdNumber, buttonName })\n      .subscribe({\n        next: (response) => {\n          console.log('Button click recorded', response);\n        },\n        error: (error) => {\n          console.error('Error recording button click', error);\n        }\n      });\n  }\n\n  public getUserButtonStats(): Observable<any[]> {\n    return this.http.get<any[]>(this.userButtonStatsUrl);\n  }\n\n  public getUsers(): Observable<any[]> {\n    return this.http.get<any[]>(this.usersUrl);\n  }\n\n  public logoutAndRedirect(): void {\n    const token = sessionStorage.getItem('token'); // Token'ı almak için uygun yer\n\n    if (!token) {\n      console.error('No token found');\n      // Eğer token yoksa bile yönlendirme yap\n      this.router.navigate(['/login']);\n      return;\n    }\n\n    // Yönlendirme işlemini başlat\n    this.router.navigate(['/login']).then(() => {\n      // Yönlendirme tamamlandıktan sonra token'ı sil\n      sessionStorage.removeItem('token'); // Token'ı sil\n      sessionStorage.removeItem('userId'); // Kullanıcı ID'sini de silebilirsin\n    });\n  }\n\n  public checkToken(): boolean {\n    const token = sessionStorage.getItem('token');\n    return !!token; // Token varsa true, yoksa false döner\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}